package com.khoubyari.example.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.metrics.CounterService;
import org.springframework.boot.actuate.metrics.GaugeService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.khoubyari.example.dao.jpa.HotelRepository;
import com.khoubyari.example.domain.Hotel;
import com.khoubyari.example.exception.DataFormatException;
import com.khoubyari.example.exception.ResourceNotFoundException;

/*
 * Sample service to demonstrate what the API would use to get things done
 */
@Service
public class HotelService {

    @SuppressWarnings("unused")
	private static final Logger log = LoggerFactory.getLogger(HotelService.class);

    @Autowired
    private HotelRepository hotelRepository;

    @Autowired
    CounterService counterService;

    @Autowired
    GaugeService gaugeService;

    public HotelService() {
    }

    /**
     * Create a hotel. Id must be zero as it will be generated by the database on insert. Idempotent so if you call this
     * twice with same data you will get two rows with different ids.
     * @param hotel
     * @return
     */
    public Hotel createHotel(Hotel hotel) {
    	if (hotel.getId() != 0) {
    		throw new DataFormatException("Cannot create a hotel if id non-zero. Id is auto-generated by the datasource.");
    	}
        return hotelRepository.save(hotel);
    }

    /**
     * Get a hotel for id.
     * @param id The hotel's id
     * @return Hotel
     * @throws ResourceNotFoundException if not found
     */
    public Hotel getHotel(long id) {
        Hotel hotel = hotelRepository.findOne(id);
        if (hotel == null) {
        	throw new ResourceNotFoundException("Hotel is not found for id " + id);
        }
        return hotel;
    }

    /**
     * Update existing hotel. Idempotent so you can update twice with the same outcome the second time.
     * @param hotel
     * @return
     */
    public Hotel updateHotel(Hotel hotel) {
    	if (hotelRepository.findOne(hotel.getId()) == null) {
    		throw new ResourceNotFoundException("Hotel is not found for id " + hotel.getId());
    	}
        return hotelRepository.save(hotel);
    }

    /**
     * Delete a hotel. Idempotent, so if you delete it twice it deletes the first time and does nothing subsequently.
     * @param id
     */
    public void deleteHotel(Long id) {
        hotelRepository.delete(id);
    }

    //http://goo.gl/7fxvVf
    public Page<Hotel> getAllHotels(Integer page, Integer size) {
		Page<Hotel> pageOfHotels = hotelRepository.findAll(new PageRequest(page, size));
        // example of adding to the /metrics
        if (size > 50) {
            counterService.increment("Khoubyari.HotelService.getAll.largePayload");
        }
        return pageOfHotels;
    }
}
